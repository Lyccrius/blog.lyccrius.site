<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-25T12:16:17+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Lyccrius’s Blog</title><subtitle>This is lyccrius's blog.
</subtitle><author><name>Lyccrius</name></author><entry><title type="html">AcWing 89. a^b</title><link href="http://localhost:4000/solution/acwing/89.html" rel="alternate" type="text/html" title="AcWing 89. a^b" /><published>2022-07-24T00:00:00+08:00</published><updated>2022-07-24T00:00:00+08:00</updated><id>http://localhost:4000/solution/acwing/89</id><content type="html" xml:base="http://localhost:4000/solution/acwing/89.html"><![CDATA[<blockquote>
  <p>题目链接：<a href="https://www.acwing.com/problem/content/91/" target="_blank">89. a^b - AcWing题库</a></p>
</blockquote>

<p>如果 \(b\) 在二进制表示下有 \(k\) 位，其中第 \(i(0\le i&lt;k)\) 位的数字是 \(c_i\) ，那么：</p>
<blockquote>
\[b=c_{k-1}2^{k-1}+c_{k-2}2^{k-2}+…+c_{0}2^{0}\]
</blockquote>

<p>于是：</p>
<blockquote>
\[{a^b}=a^{c_{k-1}*2^{k-1}}*a^{c_{k-1}*2^{k-1}}*…*a^{c_0*2^0}\]
</blockquote>

<p>因为 \(k=\lceil{log_2(b+1)}\rceil\) ，所以上式乘积项的数量不多于 \(\lceil{log_2(b+1)}\rceil\) 个。</p>

<p>又因为：</p>
<blockquote>
\[a^{2^i}=(a^{2^{i-1}})^2\]
</blockquote>

<p>所以很容易通过 \(k\) 次递推求出每个乘积项，当 \(c_i=1\) 时，把该乘积项累积到答案中。</p>
<ul>
  <li>\(b\&amp;1\) 运算可以取出 \(b\) 在二进制表示下的最低位</li>
  <li>\(b&gt;&gt;1\) 运算可以舍去最低位</li>
</ul>

<p>在递推的过程中将二者结合，就可以遍历 \(b\) 在二进制表示下的所有数位 \(c_i\) 。</p>

<p>在循环到 \(i\) 次时，变量 \(a\) 中存储的是 \(a^{2^i}\)，若 \(b\) 该位为 1，则把此时的变量 \(a\) 累计到答案 ans 中。</p>

<p>在C++语言中，两个数值执行算数运算时，以参与运算的最高数值类型为基准，与保存结果的变量类型无关。</p>

<p>虽然两个 32 位整数的乘积可能超过 int 类型的表示范围，但是 CPU 只会用 1 个 32 位寄存器保存结果，造成越界现象。</p>

<p>因此，我们必须把<strong>其中一个数强制转换成 64 位整数类型 long long</strong>参与运算，从而得到正确的结果。</p>

<p>最终对 \(p\) 取模以后，执行赋值操作时，该记过会被隐式转换成 int 存回 ans 中。</p>

<p>整个算法的时间复杂度位 \(O(log_2b)\)。</p>

<blockquote>
  <p>完整代码：<a href="https://gitee.com/lyccrius/oi/blob/master/www.acwing.com/problem/content/91/a%5Eb.cpp" target="_blank">a^b.cpp</a></p>
</blockquote>]]></content><author><name>Lyccrius</name></author><category term="solution" /><category term="acwing" /><summary type="html"><![CDATA[题目链接：89. a^b - AcWing题库]]></summary></entry><entry><title type="html">Acwing 90. 64位整数乘法</title><link href="http://localhost:4000/solution/acwing/90.html" rel="alternate" type="text/html" title="Acwing 90. 64位整数乘法" /><published>2022-07-24T00:00:00+08:00</published><updated>2022-07-24T00:00:00+08:00</updated><id>http://localhost:4000/solution/acwing/90</id><content type="html" xml:base="http://localhost:4000/solution/acwing/90.html"><![CDATA[<blockquote>
  <p>题目链接：<a href="https://www.acwing.com/problem/content/92/" target="_blank">90. 64位整数乘法 - AcWing题库</a></p>
</blockquote>

<p>因为 C++ 内置的最高整数类型是 64 位，若运算 \(a * b \mod p\) 中的三个变量 \(a,b,p\) 都在 \(10^{18}\) 级别，则不存在一个可供强制转换的 128 位整数类型，我们需要一些特殊的处理办法。</p>

<h2 id="方法一">方法一</h2>
<p>类似于快速幂的思想，把整数 \(b\) 用二进制表示，即</p>
<blockquote>
\[b=c_{k-1}2^{k-1}+c_{k-2}2^{k-2}+\cdots+c_02^0\]
</blockquote>

<p>那么</p>
<blockquote>
\[a*b=c_{k-1}*a*2^{k-1}+c_{k-2}*a*2^{k-2}+\cdots+c_0*a*2^0\]
</blockquote>

<p>因为</p>
<blockquote>
\[a*2^i=(a*2^{i-1})*2\]
</blockquote>

<p>若已求出 \({a*2^i-1\mod p}\) ，则计算 \((a*2^{i-1})*2\mod a\) 时，运算过程中每一步的结果都不超过 \(2*10^{18}\)，仍在64位整数 long long 的表示范围内，所以很容易通过 \(k\) 次地推求出每个乘积项。</p>

<p>当 \(c_i=1\) 时，把该乘积项累计加到答案中即可。</p>

<p>时间复杂度为 \(O(log_2b)\)。</p>

<blockquote>
  <p>完整代码：<a href="https://gitee.com/lyccrius/oi/blob/master/www.acwing.com/problem/content/92/64位整数乘法1.cpp" target="_blank">64位整数乘法1.cpp</a></p>
</blockquote>

<h2 id="方法二">方法二</h2>
<p>利用 \(a*b\mod p=a*b-\lfloor a*b/p\rfloor *p\)，记 \(c=\lfloor a*b/p\rfloor\)。</p>

<p>若用浮点数直接计算 \(a*b/p\)，当浮点数的精度不足以保存精确数值时，它会舍去地位，所以得到的结果是 \(c.\_\_\_\)，其中小数点之后的部分是不准确的。</p>

<p>long double 在十进制下的有效数字有 18~19 位。</p>

<p>当 \(a,b&lt;p\) 时，\(c\) 一定也小于 \(p\)，即 \(c\) 在 18 位以内。</p>

<p>故 long double 足够胜任保存整数部分的精确值 \(c\)。</p>

<p>再把结果强制转化为 unsigned long long 类型，即可得到整数 \(c\)。</p>

<p>当 \(a*b\) 恰好能被 \(p\) 整除时，由于精度误差，算出的 \(c\) 可能比实际小 \(1\)，但这在取模一一下并不影响结果的正确性。<del>这一段只要知道有这么回事就可以了，不要去管它具体为什么是这样，这样就是这样，反正这个阶段学也学不懂浪费时间（bushi）（逃）</del></p>

<p>再算出 \(a*b-c*p\)。</p>

<p>因为 \(a*b-c*p\) 实际上是 \(a*b\mod p\)，所以 \(a*b-c*p\le p&lt;2^{64}\)，进而 \(a*b-c*p=(a*b-c*p)\mod 2^{64}\)。</p>

<p>因为 unsigned long long 自然溢出等价于对 \(2^{64}\) 取模，所以我们用 unsigned long long 计算 \(x=a*b\) 和 \(y=c*p\)，再用 long long 计算 \((x\mod p-y\mod p)\mod p\)，即可得到最终的结果。</p>

<p>时间复杂度为 \(O(1)\)。</p>

<blockquote>
  <p>完整代码：<a href="https://gitee.com/lyccrius/oi/blob/master/www.acwing.com/problem/content/92/64位整数乘法2.cpp" target="_blank">64位整数乘法2.cpp</a></p>
</blockquote>]]></content><author><name>Lyccrius</name></author><category term="solution" /><category term="acwing" /><summary type="html"><![CDATA[题目链接：90. 64位整数乘法 - AcWing题库]]></summary></entry><entry><title type="html">《算法竞赛进阶指南》0x01 位运算</title><link href="http://localhost:4000/course/sfjs/jjzn/0x01.html" rel="alternate" type="text/html" title="《算法竞赛进阶指南》0x01 位运算" /><published>2022-07-22T10:16:56+08:00</published><updated>2022-07-22T10:16:56+08:00</updated><id>http://localhost:4000/course/sfjs/jjzn/0x01</id><content type="html" xml:base="http://localhost:4000/course/sfjs/jjzn/0x01.html"><![CDATA[<p>0x代表16进制<br />
0x00~0xFF是以最高位二进制位为正负符号位的“补码”形式表示的8位二进制数。<br />
8位二进制数对应char类型，范围为-128~127，其中0xFF代表-1，0x7F代表最大值127。</p>

<h2 id="补码">补码</h2>
<h3 id="32位无符号整数-unsigned-int">32位无符号整数 unsigned int：</h3>
<p>直接把这32位编码C看作32位二进制数n。</p>
<h3 id="32位有符号整数-int">32位有符号整数 int：</h3>
<p>以最高位为符号位，0表示非负数，1表示负数。<br />
对于最高位为0的每种编码C，直接看作32位二进制数S。<br />
同时，定义该编码按位取反后得到的编码~C表示的数值为-1-S。<br />
在补码下每个数值都有唯一的表示方式，并且任意两个数值做加减法运算，都等价于在32为补码下做<strong>最高位不进位</strong>的二进制加减法运算。</p>
<blockquote>
  <p>正数：原码=反码=补码<br />
负数：反码=原码除符号位取反；补码=反码+1<br />
个人理解：负数补码的符号位相当于<code class="language-plaintext highlighter-rouge">-2147483648</code>，其余位与正数表示数值相同。</p>
</blockquote>

<h4 id="0x3f-3f-3f-3f">0x3F 3F 3F 3F</h4>
<p>满足以下两个条件的最大整数。</p>
<ol>
  <li>整数的两倍不超过 0x7F FF FF FF，即int能表示的最大正整数。</li>
  <li>整数的每8位（每个字节）都是相同的。</li>
</ol>

<h4 id="memset">memset</h4>
<p><code class="language-plaintext highlighter-rouge">memset(a, val, sizeof(a));</code><br />
把数值 val(0x00~0xFF) 填充到数组a的每个字节上。<br />
1个int占用4个字节，所以只能赋值出“每8位都相同”的int。<br />
综上所述，0x7F 7F 7F 7F 是能初始化出的最大数值。<br />
把数值初始化成正无穷时，为避免加法算数上溢或繁琐的判断，用<code class="language-plaintext highlighter-rouge">memset(a, 0x3f, sizeof(a))</code>来代替。</p>

<h2 id="移位运算">移位运算</h2>

<h3 id="左移">左移</h3>
<p>在二进制表示下把数字同时向左移动，低位以0填充，高位越界后舍弃。</p>
<blockquote>
  <p>1 « n = $2^n$, n « 1 = 2n</p>
</blockquote>

<h3 id="算数右移">算数右移</h3>
<p>在二进制补码表示下把数字同时向右移动，高位以符号位填充，低位越界后舍弃。</p>
<blockquote>
  <p>n » 1 = $\lfloor {n \over 2.0} \rfloor$</p>
</blockquote>

<p>算数右移等于除以2向下取整，(-3) » 2 = -2，3 » 1 = 1。<br />
“整数/2”在C++中实现为“除以2向零取整”，(-3) / 2 = -1，3 / 2 = 1。</p>

<h3 id="逻辑右移">逻辑右移</h3>
<p>在二进制位补码表示下把数字同时向右移动，高位以0填充，低位越界后舍弃。<br />
一般编译器均使用算数右移。<br />
默认右移操作采用算数右移。</p>]]></content><author><name>Lyccrius</name></author><category term="course" /><category term="sfjs" /><category term="jjzn" /><summary type="html"><![CDATA[0x代表16进制 0x00~0xFF是以最高位二进制位为正负符号位的“补码”形式表示的8位二进制数。 8位二进制数对应char类型，范围为-128~127，其中0xFF代表-1，0x7F代表最大值127。]]></summary></entry><entry><title type="html">AcWing 算法基础课 二分</title><link href="http://localhost:4000/note/oi/acwing-erfen.html" rel="alternate" type="text/html" title="AcWing 算法基础课 二分" /><published>2022-07-21T11:32:55+08:00</published><updated>2022-07-21T11:32:55+08:00</updated><id>http://localhost:4000/note/oi/acwing-erfen</id><content type="html" xml:base="http://localhost:4000/note/oi/acwing-erfen.html"><![CDATA[<blockquote>
  <p>7月14号老师布置任务让15号讲二分<br />
7月15号返校听填报志愿指导没讲成<br />
7月16号组织了场内部比赛又没讲成<br />
7月17号最后又安排我讲的归并排序<br />
哈哈哈哈哈哈哈哈。。。。。。。。</p>
</blockquote>

<h1 id="引入">引入</h1>
<p>提到二分，大多数oier的第一反应应该是二分查找，即在一个有序序列中查找一个数字或字符是否出现及某次出现的位置。<br />
而正因为序列是有序的，所以在学习此算法时通常会误认为二分的本质是在具有单调性的序列上进行定位操作。</p>

<p>实则不然……</p>

<h1 id="二分的本质">二分的本质</h1>
<p>寻找不同性质区间的边界。</p>

<p>二分的本质实际上是根据某一性质将某一序列划分为前后两部分，并寻找这两部分的边界。</p>

<p>如之前提到的二分查找，在长度为 <code class="language-plaintext highlighter-rouge">n</code> 的序列 <code class="language-plaintext highlighter-rouge">a</code> 中查找数字 <code class="language-plaintext highlighter-rouge">x</code> 首次出现的位置，实际上是将序列划分为 <code class="language-plaintext highlighter-rouge">a[i] &lt; x</code> 和 <code class="language-plaintext highlighter-rouge">a[i] &gt;= x</code> 左右两部分，并寻找 <code class="language-plaintext highlighter-rouge">a[i] &gt;= x</code> 区间的左边界。</p>

<p>至于判断数字x是否存在于序列a中，则可根据二分得到的边界值进行判断，即判断 <code class="language-plaintext highlighter-rouge">a[i] == x</code> 。</p>

<h1 id="模版">模版</h1>
<p>这里粘两个 <code class="language-plaintext highlighter-rouge">yxc</code> 的二分模版</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：
int bsearch_1(int l, int r)
{
    while (l &lt; r)
    {
        int mid = l + r &gt;&gt; 1;
        if (check(mid)) r = mid;
        else l = mid + 1;
    }
    return l;
}

// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：
int bsearch_2(int l, int r)
{
    while (l &lt; r)
    {
        int mid = l + r  + 1 &gt;&gt; 1;
        if (check(mid)) l = mid;
        else r = mid - 1;
    }
    return l;
}
</code></pre></div></div>

<p>讲一下第二个板子为什么 <code class="language-plaintext highlighter-rouge">mid = l + r + 1 &gt;&gt; 1</code> 要 <code class="language-plaintext highlighter-rouge">+1</code> 。</p>

<p>当 <code class="language-plaintext highlighter-rouge">l</code> 与 <code class="language-plaintext highlighter-rouge">r</code> 差值为 <code class="language-plaintext highlighter-rouge">1</code> 时，<code class="language-plaintext highlighter-rouge">mid = l + r + 1 &gt;&gt; 1</code> 后 <code class="language-plaintext highlighter-rouge">l</code> 值与 <code class="language-plaintext highlighter-rouge">mid</code> 相同。此后若 <code class="language-plaintext highlighter-rouge">check(mid)</code> 返回值为 <code class="language-plaintext highlighter-rouge">true</code> ，<code class="language-plaintext highlighter-rouge">l</code> 的值仍与 <code class="language-plaintext highlighter-rouge">mid</code> 相同，这将进入一个死循环而导致 <code class="language-plaintext highlighter-rouge">RE</code> 。故需要 <code class="language-plaintext highlighter-rouge">+ 1</code> 使得写入 <code class="language-plaintext highlighter-rouge">mid</code> 的值为 <code class="language-plaintext highlighter-rouge">r</code> 。</p>

<p>至于什么情况下需要 <code class="language-plaintext highlighter-rouge">+ 1</code> ，请自行理解并视情况而定。</p>

<h1 id="习题及代码">习题及代码</h1>
<blockquote>
  <p><a href="https://www.acwing.com/problem/content/791/">Acwing 789. 数的范围</a><br />
<a href="https://gitee.com/lyccrius/oi/tree/master/www.acwing.com/problem/content/791">Lyccrius’s Code</a></p>
</blockquote>

<blockquote>
  <p><a href="https://www.acwing.com/problem/content/792/">AcWing 790. 数的三次方根</a><br />
<a href="https://gitee.com/lyccrius/oi/tree/master/www.acwing.com/problem/content/792">Lyccrius’s Code</a></p>
</blockquote>

<hr />

<blockquote>
  <p>STO yxc OTZ</p>
</blockquote>]]></content><author><name>Lyccrius</name></author><category term="note" /><category term="oi" /><summary type="html"><![CDATA[7月14号老师布置任务让15号讲二分 7月15号返校听填报志愿指导没讲成 7月16号组织了场内部比赛又没讲成 7月17号最后又安排我讲的归并排序 哈哈哈哈哈哈哈哈。。。。。。。。]]></summary></entry><entry><title type="html">第一篇Blog</title><link href="http://localhost:4000/essay/the-first-blog.html" rel="alternate" type="text/html" title="第一篇Blog" /><published>2022-07-18T22:18:25+08:00</published><updated>2022-07-18T22:18:25+08:00</updated><id>http://localhost:4000/essay/the-first-blog</id><content type="html" xml:base="http://localhost:4000/essay/the-first-blog.html"><![CDATA[<blockquote>
  <p>今天是2022年7月18日，Lyccrius的新Blog终于建成了。</p>
</blockquote>

<p>写博客这个打算最早是在2020年上半年产生的，那时刚刚步入初中的我看到CSDN、简书、知乎上的博主在网络上发表着自己的博客，也想做和他们一样的事情。</p>

<p>我的第一篇博客是在CSDN上发表的，记得那是3月份，内容是解决PM981硬盘无法正常安装黑苹果的问题。前前后后一共删改了八版 <del>（第二版因为不知名的原因已经找不到了）</del>，最后一版的链接在<a href="https://blog.csdn.net/m0_46463797/article/details/108293995">这</a>。</p>

<p>2020年7月，在酒店隔离时，我购买腾讯云的服务器用wordpress搭建blog，并注册域名<code class="language-plaintext highlighter-rouge">extreigionor.info</code>（没错一个现在看来很傻逼的id，<del>extreme+legion+or=extreigionor</del>，当时甚至还用新Edge浏览器图标作头像），但是由于服务器在中国大陆需要备案域名无法使用。</p>

<p>2021年1月，我与期末考试取得年级117名的成绩（没错记得就是这么清楚），这个名次可以说差不多能进一中了，不过实际上忽略计算了保推名额（我初中是考进来的所以没有保推哈哈哈～～）。然后就通过阿里云花费一千出头购买了一台香港服务器及域名<code class="language-plaintext highlighter-rouge">lycrius.net</code>。我在这一套单位上用wordpress搭建blog、题解、商店，还模仿<code class="language-plaintext highlighter-rouge">uncle-lu</code>搭建了说说（不过用了半年它们就全都荒废了）。</p>

<p>2022年7月，我作为信息学竞赛特长生来到一中，见到了许多以前见过和没见过的大佬和目前还不是大佬的学长，我又有了重操旧业的念头。经过多方面的斟酌打算 <del>（实际上就是麻烦）</del> 我选择用 Jekyll + Github Pages 搭建新的blog。</p>

<p>这次的新的blog于2022.7.16开始搭建，于2022.7.18建成 <del>（在XJ搞机有时候真的会很麻烦）</del> 。</p>

<p>第一篇Blog就作为我建站的一份回忆录吧（现在是2022.7.19 22:42我才写完qwq）！</p>]]></content><author><name>Lyccrius</name></author><category term="essay" /><summary type="html"><![CDATA[今天是2022年7月18日，Lyccrius的新Blog终于建成了。]]></summary></entry><entry><title type="html">第一次 Newsletter</title><link href="http://localhost:4000/essay/newsletter-1.html" rel="alternate" type="text/html" title="第一次 Newsletter" /><published>2022-06-15T00:00:00+08:00</published><updated>2022-06-15T00:00:00+08:00</updated><id>http://localhost:4000/essay/newsletter-1</id><content type="html" xml:base="http://localhost:4000/essay/newsletter-1.html"><![CDATA[<blockquote>
  <p>“在追寻一个方向的路上，出现的绊脚石也不一定是绊脚石。可能它只是想让你停下来思考你是否在正确的道路上。”——uncle-lu</p>
</blockquote>

<h2 id="topic1">Topic 1</h2>
<p>最近一段时间经常被某问题困扰并受其影响，今天下午自习课上修改作文时突然意识到下面这段话：</p>
<blockquote>
  <p>“所以说我现在真正需要解决的问题，并不是怎样去处理和对待此类的人和事，而是怎样去恰当、合理地认识和看待他们，以及个人观念和行为模式的修正等问题。”</p>
</blockquote>

<p>首先，我们来聊聊我究竟遇到了什么问题。</p>

<p>问题是：在即将面临中考的时局下，不得不在社交方面进行一些取舍，然而这样的取舍外加一些外界因素导致了我内心不平衡而出现杞人忧天的现象。</p>

<p>通过比对环境变量我发现，根本问题在于人民（我）日益增长的美好生活需要与不平衡不充分的发展之间的矛盾。那么可以将问题拆解为“美好生活需要日益增长”与“发展不平衡不充分”两部分。</p>

<p>其次，就这两个部分进行深入探讨分析。</p>

<p>先来看“美好生活需要日益增长”。这种现象产生是由于受过往经历、社会风气和当下主流行为习惯的影响，没能够对“美好生活”产生相对恰当理性的认识，或者说认识过于片面仅仅停留在理论方面，导致无法贯彻落实在具体行动当中。</p>

<p>再来看“发展不平衡不充分”。不恰当的认识产生不恰当的“美好生活需要”，不恰当的“美好生活需要”长期以来无法实现导致矛盾加剧。这样不恰当的“美好生活需要”，却在另一群体上以一种极其不合时宜（猥琐）的方式实现。这样的矛盾长时间以来无法得以解决，理想状态与现实生活落差大而导致矛盾加剧。</p>

<p>明晰了问题所在，然后我们来探究解决问题的方法。</p>

<p>既然问题已经存在一段时间且矛盾并未消除，那么不难推测问题的解决并非容易之事。</p>

<p>上文提到问题产生的关键在于“不恰当的认识”和“理想与现实的差异”。</p>

<p>就“不恰当的认识”而言，我很早就意识到了这样的认识是不恰当的，却无法将这样观念落实在具体行动中。这或许是一年前的历史遗留问题。既然问题长期存在且无法克服，那么我们不妨先尝试适应并接受这种环境状态，在此过程中慢慢改变自身观念并将相对合理的认识落实于现实。</p>

<p>“理想与现实的差异”始终存在，学会接受这一现象并努力拼搏让现实朝着理想前进，是我们个人成长的必由之路，也是当下急需掌握的一项本领。</p>

<p>最后来做一个小结。</p>

<p>“杞国有人忧天地崩坠，身亡所寄，废寝食者。”整天怀着毫无必要的担心和无穷无尽的忧愁，终将成为自扰又扰人的庸人。这一问题所反映出的不仅仅是我对于理想和现实认识的不适宜，更重要的是自身思考方式和行为模式的不合理。我的独立思维才初步建立，误入歧途会在这一阶段是常有的事，思想境界迈进一级小台阶也将成为常态。或许我过去、现在及未来会面临的一切问题都将因生活阅历的丰富和知识储备的提升得以解决，那么我现在唯一需要去做的事情就是——<br />
去学习。</p>

<h2 id="topic2">Topic 2</h2>
<p>在 Topic 1 中提到，某些外界因素或许会对我产生一些或好或坏的影响，甚者会产生历史遗留问题对未来发展产生不良影响。由此可见，当前的我的精神世界是很容易受外界干扰的。</p>

<p>“淫慢则不能励精，险躁则不能治性。”如果我长期容易受外界干扰的话，那么在独立思维的发展过程中，误入歧途的概率将大幅提升，这并不利于我人生的走向及未来的发展。</p>

<p>各方面观点、势力共同存在于网络空间中，各自欣赏、相互尊重、兼收并蓄、包容开放，这是我认为网络生活运转的理想状态。可这样的状态想要实现，况且不谈整个社会，就是对各个社会成员而言又何谈容易？</p>

<p>在当前互联网产业链蓬勃发展的时代背景下，我认为个人想要尽可能减小收到互联网文化思潮对个人的冲击最有效最直接的方式是——<br />
信息节食。</p>

<h2 id="topic3">Topic 3</h2>
<p>昨日与姜老师的谈话当中，姜老师提到：我对自己的期望值太高了。不得不承认，我确实如此。过去三年的我希望能够进入年级前三十，可我的努力程度自始至终都没有一天与该目标相匹配，目标自然从未达成。临近中考，我又希望自己能够考入一中理特班。毋庸置疑，我并不相信我能够做到。</p>

<p>现在的我也并不希望我能够通过中考就进入理特班。如果说我这次碰巧入围了，那么势必会给我带来“我不需要怎么努力也可以很优秀”的不良心理暗示，对于其他真正努力的同学来说也是不公平的。</p>

<p>“奋斗青年”的反义词是“摆烂青年”，但并不是说这个世界上只容许这两种人的存在。一个观点如果单从字面角度进行否定话处理，那么其否命题将与之走向两个极端。这对于逻辑推理来说是好的，却不利于观点间的驳论。</p>

<p>并不是说我已经完全放弃了进入理特班的念头，而是更愿意在进入一中后的一年时间内，通过自己真正的努力考入理特班。</p>]]></content><author><name>Lyccrius</name></author><category term="essay" /><summary type="html"><![CDATA[“在追寻一个方向的路上，出现的绊脚石也不一定是绊脚石。可能它只是想让你停下来思考你是否在正确的道路上。”——uncle-lu]]></summary></entry><entry><title type="html">我在想</title><link href="http://localhost:4000/essay/wo-zai-xiang.html" rel="alternate" type="text/html" title="我在想" /><published>2022-04-21T00:00:00+08:00</published><updated>2022-04-21T00:00:00+08:00</updated><id>http://localhost:4000/essay/wo-zai-xiang</id><content type="html" xml:base="http://localhost:4000/essay/wo-zai-xiang.html"><![CDATA[<p>我在想语文还有半个单元文言文注解没背，作文的新素材也没有找好。数学最近是不是有点小退步，计算还是不太仔细，圆和二次函数应用题的掌握还有没有问题，怎么办学霸前桌又在把我往死里卷惨绝人寰不留余地。英语听写还没背糟糕，八年级英语单词还有一部分不会拼。物理化学听说下周考试，实验探究又要一分分的扣。还有政治历史，能不能再多空一些时间出来学，能不能再努力一点。</p>

<p>今天也有在好好学习天天向上吗？</p>

<p>今天也有在热爱生活吗？</p>

<p>今天也活在过去的光环里吗？</p>

<p>我会想周一到周五简直是出卖灵魂的日子，但那又是我日复一日不抑制翻涌奔腾的大欢喜。</p>

<p>体育课要跑八百一千，大家咆哮着要反抗体育老师。</p>

<p>总有那么一群家伙因为一点小事从早上哈哈哈到晚上。</p>

<p>总有女孩子在这阳光里走进某某的心底，我就看着她的马尾一晃一晃直发呆。</p>

<p>总有形成组织的学霸们在讲台上讨论理科题，偶尔也会刹不住车演变成凡尔赛大会。</p>

<p>跑操的时候心想每个同学保持相同间距，只要我够快，后面的同学就会加速，环形跑道上前面的同学也会加速，直到我们抵达第四宇宙速度一飞冲天逃离银河系。</p>

<p>走过知行楼右面的时候盯着地下车库，心想这里又发生过什么故事。</p>

<p>中午拿饭的时候推推搡搡，大家举着餐具疯了一样冲上去，争抢着开饭桶再一人吐槽一句今天吃的好像猪食。</p>

<p>其实有时候会想的很深，特别是和蔼可亲的班主任在的时候总把话题引到诸如 中考 未来 选拔人才 这种事情上，好像初三的我们已经百日誓师过了，好像马上要体育中考了。其实有时候想的也挺简单的，无非是在课间和朋友们打打闹闹，看见在意的人走过就脸红心跳。我喜欢在阳台里吹晚风，那时候或者说是放空，看着忽明忽灭的教学楼，远处阑珊的灯火和高楼大厦，偶尔也会觉得孤独。</p>

<p>但这就是一段充满白日梦和胡思乱想的时光啊。</p>]]></content><author><name>Lyccrius</name></author><category term="essay" /><summary type="html"><![CDATA[我在想语文还有半个单元文言文注解没背，作文的新素材也没有找好。数学最近是不是有点小退步，计算还是不太仔细，圆和二次函数应用题的掌握还有没有问题，怎么办学霸前桌又在把我往死里卷惨绝人寰不留余地。英语听写还没背糟糕，八年级英语单词还有一部分不会拼。物理化学听说下周考试，实验探究又要一分分的扣。还有政治历史，能不能再多空一些时间出来学，能不能再努力一点。]]></summary></entry></feed>